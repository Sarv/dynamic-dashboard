// File: simplifier-aggregation-query-result.js

/**
 * Parses the complex Elasticsearch aggregation result into a flat array of objects.
 * @param {Object} result - The Elasticsearch aggregation result.
 * @param {Object} mapping - The mapping object generated by the query builder.
 * @returns {Array} An array of simplified objects, each representing a row of data.
 */
function parseAggregationResult(result, mapping) {
    const parsedResults = [];

    function traverse(currentResult, currentMapping, currentPath = {}) {
        if (!currentMapping) return;

        Object.keys(currentMapping).forEach(key => {
            const aggInfo = currentMapping[key];
            const aggResult = currentResult?.aggregations?.[key] ?? currentResult?.[key];

            if (aggInfo.axisType === 'main_axis') {
                if (aggResult && aggResult.buckets) {
                    aggResult.buckets.forEach(bucket => {
                        const newPath = { 
                            ...currentPath, 
                            [aggInfo.aggNum]: bucket.key,
                            [`${aggInfo.aggNum}_doc_count`]: bucket.doc_count
                        };
                        if (aggInfo.child) {
                            traverse(bucket, aggInfo.child, newPath);
                        } else {
                            parsedResults.push(newPath);
                        }
                    });
                } else {
                    console.warn(`Unexpected structure for main_axis aggregation: ${key}`);
                }
            } else if (aggInfo.axisType === 'value_axis') {
                Object.keys(currentMapping).forEach(valueKey => {
                    const valueAggInfo = currentMapping[valueKey];
                    if (valueAggInfo.axisType === 'value_axis') {
                        const valueResult = currentResult[valueKey];
                        currentPath[valueAggInfo.aggNum] = valueResult ? valueResult.value : null;
                    }
                });
                parsedResults.push(currentPath);
                return; // Stop traversing after processing value_axis
            }
        });
    }

    traverse(result.aggregations, mapping);
    return parsedResults;
}

module.exports = { parseAggregationResult };