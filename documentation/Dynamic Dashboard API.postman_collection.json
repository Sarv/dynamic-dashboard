{
	"info": {
		"_postman_id": "765ba568-0417-466e-bc21-689d342e0c79",
		"name": "Dynamic Dashboard API",
		"description": "A collection for testing the Dynamic Dashboard API with masked field names, error codes, response structures, and detailed examples for frontend development.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6441366",
		"_collection_link": "https://sarvapi.postman.co/workspace/66f5d5cb-6d3b-4d29-98b0-e3028e100213/collection/6441366-765ba568-0417-466e-bc21-689d342e0c79?action=share&source=collection_link&creator=6441366"
	},
	"item": [
		{
			"name": "Create Dashboard",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"dashboardTitle\": \"Sales Overview\",\n    \"dashboardStatus\": 1,\n    \"dashboardModules\": [\n        {\n            \"moduleId\": \"sales-chart\",\n            \"positionX\": 0,\n            \"positionY\": 0,\n            \"moduleWidth\": 6,\n            \"moduleHeight\": 4\n        },\n        {\n            \"moduleId\": \"revenue-meter\",\n            \"positionX\": 6,\n            \"positionY\": 0,\n            \"moduleWidth\": 3,\n            \"moduleHeight\": 2\n        }\n    ],\n    \"userId\": \"user123\",\n    \"globalFilter\": \"year:2023\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/dashboard/create",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"dashboard",
						"create"
					]
				},
				"description": "Creates a new dashboard with the provided details.\n\n**Request Fields:**\n\n| Field | Type | Required | Description |\n|-------|------|----------|-------------|\n| dashboardTitle | string | Yes | The title of the dashboard |\n| dashboardStatus | number | No | The status of the dashboard (0: inactive, 1: active, -1: deleted) |\n| dashboardModules | array | No | An array of module objects |\n| userId | string | Yes | The ID of the user creating the dashboard |\n| globalFilter | string | No | Global filter for the dashboard |\n\n**Module Fields:**\n\n| Field | Type | Required | Description |\n|-------|------|----------|-------------|\n| moduleId | string | Yes | Unique identifier for the module |\n| positionX | number | Yes | X position of the module |\n| positionY | number | Yes | Y position of the module |\n| moduleWidth | number | Yes | Width of the module |\n| moduleHeight | number | Yes | Height of the module |\n\n**Response:**\n\n```json\n{\n    \"message\": \"Dashboard created successfully\",\n    \"id\": \"generated-dashboard-id\"\n}\n```\n\n**Possible Error Codes:**\n\n| Error Code | Description |\n|------------|-------------|\n| INVALID_TITLE | Title is required and must be a string |\n| INVALID_STATUS | Invalid status value |\n| INVALID_GLOBAL_FILTER | Global filter must be a string |\n| INVALID_MODULES | Modules must be an array of valid module objects |\n| INVALID_MODULE_ID | Module ID is required and must be a string |\n| INVALID_POSITION_X | Position X must be an integer |\n| INVALID_POSITION_Y | Position Y must be an integer |\n| INVALID_WIDTH | Width must be a positive integer |\n| INVALID_HEIGHT | Height must be a positive integer |\n| INVALID_USER_ID | User ID is required and must be a non-empty string |\n| ELASTICSEARCH_ERROR | Error interacting with Elasticsearch |\n\n**Example Use Cases:**\n\n1. Creating a sales dashboard:\n```json\n{\n    \"dashboardTitle\": \"Sales Overview\",\n    \"dashboardStatus\": 1,\n    \"dashboardModules\": [\n        {\n            \"moduleId\": \"sales-chart\",\n            \"positionX\": 0,\n            \"positionY\": 0,\n            \"moduleWidth\": 6,\n            \"moduleHeight\": 4\n        },\n        {\n            \"moduleId\": \"revenue-meter\",\n            \"positionX\": 6,\n            \"positionY\": 0,\n            \"moduleWidth\": 3,\n            \"moduleHeight\": 2\n        }\n    ],\n    \"userId\": \"user123\",\n    \"globalFilter\": \"year:2023\"\n}\n```\n\n2. Creating a project management dashboard:\n```json\n{\n    \"dashboardTitle\": \"Project XYZ Overview\",\n    \"dashboardStatus\": 1,\n    \"dashboardModules\": [\n        {\n            \"moduleId\": \"task-list\",\n            \"positionX\": 0,\n            \"positionY\": 0,\n            \"moduleWidth\": 4,\n            \"moduleHeight\": 6\n        },\n        {\n            \"moduleId\": \"progress-chart\",\n            \"positionX\": 4,\n            \"positionY\": 0,\n            \"moduleWidth\": 5,\n            \"moduleHeight\": 3\n        },\n        {\n            \"moduleId\": \"team-workload\",\n            \"positionX\": 4,\n            \"positionY\": 3,\n            \"moduleWidth\": 5,\n            \"moduleHeight\": 3\n        }\n    ],\n    \"userId\": \"pm_user456\",\n    \"globalFilter\": \"project:XYZ\"\n}\n```\n\n**Frontend Considerations:**\n- Implement a form to collect dashboard details.\n- Use a drag-and-drop interface for positioning modules.\n- Provide a dropdown for dashboard status selection.\n- Implement client-side validation matching the API's requirements.\n- Display success message and new dashboard ID upon successful creation.\n- Handle and display error messages for various error codes."
			},
			"response": []
		},
		{
			"name": "Update Dashboard",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"{{dashboardId}}\",\n    \"dashboardTitle\": \"Updated Sales Overview\",\n    \"dashboardStatus\": 1,\n    \"dashboardModules\": [\n        {\n            \"moduleId\": \"sales-chart\",\n            \"positionX\": 0,\n            \"positionY\": 0,\n            \"moduleWidth\": 8,\n            \"moduleHeight\": 4\n        },\n        {\n            \"moduleId\": \"revenue-meter\",\n            \"positionX\": 8,\n            \"positionY\": 0,\n            \"moduleWidth\": 4,\n            \"moduleHeight\": 2\n        },\n        {\n            \"moduleId\": \"top-products\",\n            \"positionX\": 8,\n            \"positionY\": 2,\n            \"moduleWidth\": 4,\n            \"moduleHeight\": 2\n        }\n    ],\n    \"globalFilter\": \"year:2023,quarter:Q2\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/dashboard/update",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"dashboard",
						"update"
					]
				},
				"description": "Updates an existing dashboard with the provided details.\n\n**Request Fields:**\n\n| Field | Type | Required | Description |\n|-------|------|----------|-------------|\n| id | string | Yes | The ID of the dashboard to update |\n| dashboardTitle | string | No | The new title of the dashboard |\n| dashboardStatus | number | No | The new status of the dashboard |\n| dashboardModules | array | No | An updated array of module objects |\n| globalFilter | string | No | Updated global filter for the dashboard |\n\nNote: Only provide the fields you want to update. Omitted fields will remain unchanged.\n\n**Response:**\n\n```json\n{\n    \"message\": \"Dashboard updated successfully\",\n    \"id\": \"updated-dashboard-id\"\n}\n```\n\n**Possible Error Codes:**\n\n| Error Code | Description |\n|------------|-------------|\n| INVALID_ID | Invalid dashboard ID |\n| DASHBOARD_NOT_FOUND | Dashboard not found |\n| INVALID_TITLE | Title is required and must be a string |\n| INVALID_STATUS | Invalid status value |\n| INVALID_GLOBAL_FILTER | Global filter must be a string |\n| INVALID_MODULES | Modules must be an array of valid module objects |\n| INVALID_MODULE_ID | Module ID is required and must be a string |\n| INVALID_POSITION_X | Position X must be an integer |\n| INVALID_POSITION_Y | Position Y must be an integer |\n| INVALID_WIDTH | Width must be a positive integer |\n| INVALID_HEIGHT | Height must be a positive integer |\n| INVALID_UPDATE_FIELD | Attempted to update a field that is not allowed to be updated |\n| ELASTICSEARCH_ERROR | Error interacting with Elasticsearch |\n\n**Example Use Cases:**\n\n1. Updating dashboard layout and adding a new module:\n```json\n{\n    \"id\": \"dashboard123\",\n    \"dashboardModules\": [\n        {\n            \"moduleId\": \"sales-chart\",\n            \"positionX\": 0,\n            \"positionY\": 0,\n            \"moduleWidth\": 8,\n            \"moduleHeight\": 4\n        },\n        {\n            \"moduleId\": \"revenue-meter\",\n            \"positionX\": 8,\n            \"positionY\": 0,\n            \"moduleWidth\": 4,\n            \"moduleHeight\": 2\n        },\n        {\n            \"moduleId\": \"top-products\",\n            \"positionX\": 8,\n            \"positionY\": 2,\n            \"moduleWidth\": 4,\n            \"moduleHeight\": 2\n        }\n    ]\n}\n```\n\n2. Updating dashboard title and global filter:\n```json\n{\n    \"id\": \"dashboard456\",\n    \"dashboardTitle\": \"Q2 Sales Performance\",\n    \"globalFilter\": \"year:2023,quarter:Q2\"\n}\n```\n\n3. Changing dashboard status:\n```json\n{\n    \"id\": \"dashboard789\",\n    \"dashboardStatus\": 0\n}\n```\n\n**Frontend Considerations:**\n- Implement a form or modal for updating dashboard details.\n- Use a drag-and-drop interface for repositioning and resizing modules.\n- Provide options to add new modules or remove existing ones.\n- Implement partial updates, only sending changed fields to the API.\n- Display success message upon successful update.\n- Handle and display error messages for various error codes.\n- Refresh the dashboard view after successful update."
			},
			"response": []
		},
		{
			"name": "List All Dashboards",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/dashboard/list?limit=10&searchAfter={{searchAfter}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"dashboard",
						"list"
					],
					"query": [
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "searchAfter",
							"value": "{{searchAfter}}"
						}
					]
				},
				"description": "Retrieves a list of all non-deleted dashboards using search after pagination.\n\n**Query Parameters:**\n\n| Parameter | Type | Required | Description |\n|-----------|------|----------|-------------|\n| limit | number | No | The number of dashboards to return (default: 10) |\n| searchAfter | string | No | The search after value for pagination |\n\n**Response:**\n\n```json\n{\n    \"dashboards\": [\n        {\n            \"id\": \"dashboard-id-1\",\n            \"dashboardTitle\": \"Sales Overview\",\n            \"dashboardStatus\": 1,\n            \"globalFilter\": \"year:2023\",\n            \"createdAt\": 1621234567890,\n            \"updatedAt\": 1621234567890\n        },\n        {\n            \"id\": \"dashboard-id-2\",\n            \"dashboardTitle\": \"Marketing Campaign Tracker\",\n            \"dashboardStatus\": 1,\n            \"globalFilter\": \"campaign:summer2023\",\n            \"createdAt\": 1621234567891,\n            \"updatedAt\": 1621234567891\n        }\n    ],\n    \"totalDashboards\": 50,\n    \"nextSearchAfter\": \"1621234567891_dashboard-id-2\"\n}\n```\n\n**Possible Error Codes:**\n\n| Error Code | Description |\n|------------|-------------|\n| ELASTICSEARCH_ERROR | Error interacting with Elasticsearch |\n\n**Example Use Cases:**\n\n1. Initial request for dashboard list:\n   - Use this endpoint without the searchAfter parameter to get the first page of results.\n   - Example: GET {{baseUrl}}/api/dashboard/list?limit=10\n\n2. Subsequent requests for pagination:\n   - Use the nextSearchAfter value from the previous response as the searchAfter parameter.\n   - Example: GET {{baseUrl}}/api/dashboard/list?limit=10&searchAfter=1621234567891_dashboard-id-2\n\n3. Adjusting the number of results:\n   - Modify the limit parameter to change the number of dashboards returned per request.\n   - Example: GET {{baseUrl}}/api/dashboard/list?limit=20\n\n**Frontend Considerations:**\n- Implement infinite scrolling or a 'Load More' button using the nextSearchAfter value.\n- Store the nextSearchAfter value to use for the next page request.\n- Display a loading indicator while fetching more dashboards.\n- Handle cases where there are no more dashboards to load (nextSearchAfter is null).\n- Provide sorting options for different fields (e.g., title, creation date, status).\n- Implement a search functionality to filter dashboards based on title or other criteria.\n- Display dashboard status using icons or color-coding.\n- Handle empty states when no dashboards are available.\n- Provide options to navigate to individual dashboard views or edit screens.\n\n**Notes on Search After Pagination:**\n- The searchAfter parameter is based on the sorting of results (in this case, by create_time in descending order).\n- Each request will return a fixed number of results (determined by the limit parameter).\n- The nextSearchAfter value in the response should be used for the next page request.\n- This method allows for efficient deep pagination without the limitations of offset-based pagination.\n- You cannot jump to a specific page number with this method; pagination happens by moving forward through the results.\n\n**Handling ID-based Requests:**\nTo fetch a specific dashboard by ID, use the same endpoint with the ID in the path:\n\nGET {{baseUrl}}/api/dashboard/list/{{dashboardId}}\n\nThis will return a single dashboard object if found, or a 404 error if not found."
			},
			"response": []
		},
		{
			"name": "Delete Dashboard",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"{{dashboardId}}\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/dashboard/delete",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"dashboard",
						"delete"
					]
				},
				"description": "Soft deletes a dashboard by setting its status to -1.\n\n**Request Fields:**\n\n| Field | Type | Required | Description |\n|-------|------|----------|-------------|\n| id | string | Yes | The ID of the dashboard to delete |\n\n**Response:**\n\n```json\n{\n    \"message\": \"Dashboard deleted successfully\",\n    \"id\": \"deleted-dashboard-id\"\n}\n```\n\n**Possible Error Codes:**\n\n| Error Code | Description |\n|------------|-------------|\n| INVALID_ID | Invalid dashboard ID |\n| DASHBOARD_NOT_FOUND | Dashboard not found |\n| ELASTICSEARCH_ERROR | Error interacting with Elasticsearch |\n\n**Example Use Cases:**\n\n1. Deleting a dashboard from the dashboard list:\n   - Implement a delete button or option in the dashboard list view.\n   - Confirm the deletion action with the user before sending the request.\n\n2. Bulk deletion of dashboards:\n   - Allow users to select multiple dashboards and delete them in a single operation by calling this endpoint for each selected dashboard.\n\n3. Archiving old or unused dashboards:\n   - Instead of permanent deletion, use this endpoint to 'archive' dashboards by changing their status.\n\n**Frontend Considerations:**\n- Implement a confirmation dialog before sending the delete request.\n- Show a loading indicator while the delete request is in progress.\n- Update the UI immediately after a successful delete (remove the dashboard from the list).\n- Provide an undo option for a short period after deletion (if the backend supports it).\n- Handle and display error messages for various error codes.\n- Consider implementing a 'trash' or 'archived' section for deleted dashboards if the deletion is soft.\n- Update any dashboard counters or statistics after successful deletion."
			},
			"response": []
		}
	]
}